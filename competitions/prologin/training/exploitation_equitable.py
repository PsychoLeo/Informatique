import sys

def read():
    return sys.stdin.readline().strip()

def main():
    n = int(input())
    mine = list(map(int, read().split()))
    cmax = sum(mine)//2
    maxPossible = knapsack(mine, mine, cmax)
    # print (cmax-maxPossible)
    print (sum(mine)-2*maxPossible)
    # print ([mine[i] for i in values[::-1]])

def knapsack (p, v, cmax) :
    n = len(p)
    Opt = [[0]*(cmax+1) for _ in range (n)]
    # Sel = [[False]*(cmax+1) for _ in range (n)]
    for cap in range (p[0], cmax+1) :
        Opt[0][cap] = v[0]
        # Sel[0][cap] = True
    for i in range (n) :
        for cap in range (cmax+1) :
            if cap >= p[i] and Opt[i-1][cap-p[i]] + v[i] > Opt[i-1][cap] :
                Opt[i][cap] = Opt[i-1][cap-p[i]] + v[i]
                # Sel[i][cap] = True
            else :
                Opt[i][cap] = Opt[i-1][cap]
                # Sel[i][cap] = False
    # cap = cmax
    # sol = []
    # for i in range (n-1, -1, -1) :
    #     if Sel[i][cap] :
    #         sol.append(i)
    #         cap -= p[i]
    return Opt[n-1][cmax]

main()